Yannick LP/MIP Solver

program path  : /home/robert/Documents/studies/discrete_mathematics/steiner-trees/cmake-build-debug/yannick
instance path : instances/yannick/example_01
instance name : example_01

instances/yannick/example_01/example_01.json
{
    "cycle_time": 1.8,
    "max_cycle_number": 2,
    "max_jumper_number": 3,
    "max_machine_number": 3,
    "min_cycle_number": 2,
    "min_jumper_number": 0,
    "min_machine_number": 0,
    "precedence_graph": {
        "directed": true,
        "edges": [
            {
                "head": 3,
                "tail": 0,
                "weight": 0
            },
            {
                "head": 4,
                "tail": 1,
                "weight": 0
            },
            {
                "head": 5,
                "tail": 2,
                "weight": 0
            },
            {
                "head": 4,
                "tail": 3,
                "weight": 0
            },
            {
                "head": 5,
                "tail": 4,
                "weight": 0
            }
        ],
        "nodes": [
            {
                "id": 0,
                "weight": 1.2
            },
            {
                "id": 1,
                "weight": 1.5
            },
            {
                "id": 2,
                "weight": 1.5
            },
            {
                "id": 3,
                "weight": 0.3
            },
            {
                "id": 4,
                "weight": 0.3
            },
            {
                "id": 5,
                "weight": 0.2
            }
        ]
    }
}

Directed Graph with 6 nodes and 5 edges

Node 0 with weight 1.2 and 0 incoming edges and 1 outgoing edges
incoming:
outgoing:
[0] = 0 --( 0 )--> 3

Node 1 with weight 1.5 and 0 incoming edges and 1 outgoing edges
incoming:
outgoing:
[1] = 1 --( 0 )--> 4

Node 2 with weight 1.5 and 0 incoming edges and 1 outgoing edges
incoming:
outgoing:
[2] = 2 --( 0 )--> 5

Node 3 with weight 0.3 and 1 incoming edges and 1 outgoing edges
incoming:
[0] = 0 --( 0 )--> 3
outgoing:
[3] = 3 --( 0 )--> 4

Node 4 with weight 0.3 and 2 incoming edges and 1 outgoing edges
incoming:
[1] = 1 --( 0 )--> 4
[3] = 3 --( 0 )--> 4
outgoing:
[4] = 4 --( 0 )--> 5

Node 5 with weight 0.2 and 2 incoming edges and 0 outgoing edges
incoming:
[2] = 2 --( 0 )--> 5
[4] = 4 --( 0 )--> 5
outgoing:

Nodes
[0] = (weight = 1.2)
[1] = (weight = 1.5)
[2] = (weight = 1.5)
[3] = (weight = 0.3)
[4] = (weight = 0.3)
[5] = (weight = 0.2)

Edges
[0] = 0 --( 0 )--> 3
[1] = 1 --( 0 )--> 4
[2] = 2 --( 0 )--> 5
[3] = 3 --( 0 )--> 4
[4] = 4 --( 0 )--> 5

cycle time         : 1.8
cycle number       : 2
min cycle number : 2
max cycle number : 2
min machine number : 0
max machine number : 3
min jumper number  : 0
max jumper number  : 3

[GroupManager] add group GroupTaskTime
[GroupManager] add group GroupTaskCycle
[GroupManager] add group GroupTaskMachine
[GroupManager] add group GroupTaskPrecedence
[GroupManager] add group GroupMachine
[GroupManager] add group GroupMachineCycle
[MIPSolver] number of variables   = 60
[MIPSolver] number of constraints = 183
[MIPSolver] Problem solved in 25 milliseconds.
[MIPSolver] optimal objective value = 3
[GroupManager] compute solution for group GroupTaskTime
[GroupManager] compute solution for group GroupTaskCycle
[GroupManager] compute solution for group GroupTaskMachine
[GroupManager] compute solution for group GroupTaskPrecedence
[GroupManager] compute solution for group GroupMachine
[GroupManager] compute solution for group GroupMachineCycle
